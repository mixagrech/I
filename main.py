import telebot
from telebot import types
from telebot.types import WebAppInfo
import time
from datetime import datetime, timedelta
import pickle
import os

bot = telebot.TeleBot('7804303855:AAEJEORGTo9qq6E2lewLjm4vwg2N1oEwNBM')

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = 'user_data.pkl'


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'rb') as f:
            return pickle.load(f)
    return {
        'unique_users': set(),
        'total_count': 0,
        'last_reset_date': datetime.now(),
        'monthly_count': 0
    }


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data(data):
    with open(DATA_FILE, 'wb') as f:
        pickle.dump(data, f)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
user_data = load_data()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def update_user_stats(user_id):
    global user_data
    user_added = False

    if user_id not in user_data['unique_users']:
        user_data['unique_users'].add(user_id)
        user_data['total_count'] += 1
        user_data['monthly_count'] += 1
        user_added = True
        save_data(user_data)
        print(
            f"–ù–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_data['total_count']} (–∑–∞ –º–µ—Å—è—Ü: {user_data['monthly_count']})")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –º–µ—Å—è—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if datetime.now() - user_data['last_reset_date'] >= timedelta(days=30):
        print(f"–°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ—Å—è—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ë—ã–ª–æ {user_data['monthly_count']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü.")
        user_data['monthly_count'] = 0
        user_data['last_reset_date'] = datetime.now()
        save_data(user_data)

    return user_added


@bot.message_handler(commands=['start'])
def start(message):
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    update_user_stats(message.from_user.id)

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—åüõ∂",
                                          web_app=WebAppInfo(url='https://mixagrech.github.io/rowlivefgfmkskefker/')))
    button1 = types.InlineKeyboardButton("–ö–æ–º—å—é–Ω–∏—Ç–∏", url='https://t.me/ROWlive')
    button2 = types.InlineKeyboardButton("üéì–ö–∞–∫ –∏–≥—Ä–∞—Ç—å?", callback_data='test')
    markup.add(button1, button2)
    bot.send_photo(message.chat.id, open('dfgfdd.png', 'rb'),
                   '\n –ü—Ä–∏–≤–µ—Ç, {0.first_name}!üëã \n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ROW-LIVE!\n\nüéÆ–ò–≥—Ä–∞–π –≤ –º–∏–Ω–∏-–∏–≥—Ä—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å üí∞–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π $ROW\n‚ú®–ü–æ–ª—É—á–∞–π NFT-–±–æ–Ω—É—Å—ã –∑–∞ –¥—Ä—É–∑–µ–π\n\n5 –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –ª—é–¥–µ–π = 1 NFT!'.format(
                       message.from_user), reply_markup=markup)


@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    update_user_stats(callback.from_user.id)

    markup2 = types.InlineKeyboardMarkup()
    buttonwhatgame1 = types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—åüõ∂", web_app=WebAppInfo(
        url='https://mixagrech.github.io/rowlivefgfmkskefker/'))
    buttonwhatcommunity = types.InlineKeyboardButton("–ö–æ–º—å—é–Ω–∏—Ç–∏", url='https://t.me/ROWlive')
    markup2.add(buttonwhatgame1, buttonwhatcommunity)
    if callback.data == 'test':
        bot.send_message(callback.message.chat.id, (
            '1. –ó–∞–ø—É—Å–∫–∞–π –∏–≥—Ä—É\n2. –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π ( 5 –¥—Ä—É–∑–µ–π = 1 NFT\n3. NFT —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç —Ç–≤–æ–π –¥–æ—Ö–æ–¥\n4. –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π $ROW –µ–∂–µ–¥–Ω–µ–≤–Ω–æ\n\n–ß–µ–º —Ä–µ–∂–µ NFT - —Ç–µ–º –±–æ–ª—å—à–µ –±–æ–Ω—É—Å! üöÄ'),
                         reply_markup=markup2)


# –í—ã–≤–æ–¥–∏–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_data['total_count']}")
print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {user_data['monthly_count']}")
print(f"–°–ª–µ–¥—É—é—â–∏–π —Å–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {user_data['last_reset_date'] + timedelta(days=30)}")

bot.polling(none_stop=True)
